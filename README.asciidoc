= Getting started guide

This is a pilot for an experimental way to develop short-form (less than 100 pages or so) content for O'Reilly.  Here's how it works:

* *COMING SOON*. We supply you with a https://github.com/github/gollum[Gollum] instance, the awesome, git-powered wiki from the folks at http://www.github.com[GitHub].  You write/edit your document like you would a wiki, and you can share it with friends, editors, and other people you think might help.
* You write in AsciiDoc, an open source text format developed by http://www.methods.co.nz/asciidoc/[Stuart Rackham] (more on this in a bit).  Every time you save a page, it gets logged into a git repository, so it's always under version control.  (We can grant you access to your repo -- just ask!)
* When you're ready, we suck the AsciiDoc into our publishing toolchain, convert it to DocBook (our native format), and then push it out through various channels.  You can read a bit about this at http://www.apeth.net/matt/iosbooktoolchain.html[Matt Neuburg's blog], where he describes how he wrote his "Programming iOS" book.

So, why bother with this, you ask?  Mostly, we're trying to create a more appealing process that will get you writing as quickly as possible, not mucking around with a bunch of tools.  The cool thing about AsciiDoc, Gollum, and git (and GitHub!) is that they can help ease a lot of the complexities of the publishing process, letting you (hopefully!) focus on the what you want to say.

This document covers:

* Getting started with AsciiDoc
* Working with figures and cross-references (XREFS)
* Putting code examples on GitHub 
* Structuring your overall document
* Tips and tricks




== Figures and cross-references (XREFS)

Do not use the JPEG file format for saving screenshots, as they work poorly in print. Please use GIF, TIF, PNG, or BMP. To add a figure to your project, just place the figure file in the "attachments" directory (click the Upload Attachment button in the upper right of the screen) and add a link, like this:

====
 [[figure1]]
 .Put the caption here

 image::attachments/figure1.png[scaledwidth=90%]
====

Figures can "float" throughout the document and may not be on the same page you expect them to be. For this reason, saying things like "This figure..." or "The figure below..." might confuse the reader, since the figure may very well be on a totally separate page once the document is rendered.  For this reason, all figures must have an accompanying cross-reference.  

Cross-references (XREFS) allow you to link to other sections in the document, and are most commonly used to refer to figures.  XREFS have two elements: an anchor, which is what you're linking _to_, and a reference, which is where you're linking _from_ in your text. Anchor links are denoted by double brackets. Reference links are denoted with double angle-brackets.  

Here's a sample of how you'd reference a figure:

====
   You can see an example of foo in <<foo-figure>>.  Notice how beautiful the foo is.  Mmmmm, foo.

   [[foo-figure]]
   .Here is the caption for foo

   image::attachments/some_figure_related_to_foo.png[scaledwidth=90%]
====

To generate a cross-reference, use this syntax:

----
<<ID>>
----

where `ID` is the anchor or BlockID of the target, which you place in double square-brackets above that block.

== Code samples

We recommend that you place all code samples on GitHub. This makes it easy for you, and more importantly, your readers, to pull down the code and fix it. Take a look at Matthew Russell's https://github.com/ptwobrussell/Mining-the-Social-Web[Mining the Social Web] to see how well this works when done consistently.

[NOTE]
====
If you don't want to put your code on GitHub, you can simply place the listing files in the "attachments" directory and then use the "include" macro to pull it in, like this:

 ----
 include::attachments/my_program.py[]
 ----

====

Matthew's included a lot of niceties on the landing page, like marketing text, praise quotes, JPEG of the front cover, a plea not to steal the book, etc. We really like the way he's set up the main page, but we're certainly not mandating authors include all this material, or that they adhere to any formal strictures. If you prefer to do something much more bare-bones, that's totally fine, too. See the Jonathan LeBlanc's  https://github.com/jcleblanc/programming-social-applications[Programming Social Applications] for something far more simple.

Note that Jonathan's actually organized his code in directories by chapter, which we think is a good idea if there are a lot of code examples and/or chapters in the book. It makes it easier for readers to find things. Matthew Russell's solution for enhancing findability/navigability was to add an https://github.com/ptwobrussell/Mining-the-Social-Web/wiki/Numbered-examples[Examples Listing] to his GitHub wiki.

In terms of linking to GitHub content from the book, we'd recommend you do the following:

=== Add preface text 

Add the following text to the "Using Code Examples" section of the Preface:

====
 The code examples in the following chapters are available for download at GitHub at 
 https://github.com/<username>/<booktitle>/ -- the official code repository for this 
 book. You are encouraged to  monitor this repository for the latest bug-fixed code as 
 well as extended examples by the author and the rest of 
 the social coding community."
====

=== Link out to your examples in the text

For every code listing that's in both GitHub and the book, add a hyperlink in the book to the corresponding code in GitHub. If the code is in a formal example, we recommend putting the link in the Example title (otherwise, you may want to add the link to the preceding body text). Here's an example of the AsciiDoc markup you can use (note the backslash after "microformats" in the URL, which is necessary to escape the double underscore so it is properly translated to PDF):

====
 [[EXTEST]]
 .Scraping XFN content from a web page
  (https://github.com/ptwobrussell/Mining-the-Social-Web/blob/master/python_code/microformats\__xfn_scrape.py[microformats__xfn_scrape.py])
 ====
 ----
 import sys
 import urllib2
 import HTMLParser
 ...
 ----
 ====
====

Note that for the hyperlink node text, we've used just the filename of the code, so that the full URL isn't displayed in the Web PDF. The elemnts will appear as in <<code-on-github>>.

[[code-on-github]]
.Here's how references to your code on GitHub will appear in text
image::https://github.com/MakerPress/gettingStartedGuide/raw/master/attachments/example_with_github_link.png[scaledwidth="90%"]


== Structuring the document

Creating more complex documents is simply a matter of stitching together smaller sub documents.  While there are a variety of approaches, the one we're recommending right now (this is a pilot, after all, so this might change) is to use the special file "home.asciidoc" as a granular TOC or index page. So, basically, you put all the section headers that describe the piece's structure, and then have links out to the content pages. Keeping the structure in one place (home) will make it easier to move things around as you rewrite and edit. The idea looks something like <<doc-structure>>.

[[doc-structure]]
.Structure the overall document using headers and links
image::https://github.com/MakerPress/gettingStartedGuide/raw/master/attachments/doc_structure.png[scaledwidth="90%"]

So, how do you do this? Basically, just put all your structural headings (defined by nesting equal signs at various depths) in the home file, and then put internal links (which are the page name enclosed in double brackets). Note that you don't have to create each content page first -- you can simply create a link the link. When you click on it, the new page will be created automatically. The following sample should give you the basic idea.

----
 = Getting Started Guide

 [[intro]]

 == Chapter 1

 [[ch1-intro]]

 === Chapter 1.A

 [[ch1-a]]
 
 === Chapter 1.B

 [[ ch1-b]]

 ==== Chapter 1.B.1

 [[c1-1-b-1]]

 ==== Chapter 1.B.2

 [[c1-1-b-2]]

 == Chapter 2

 [[ch2-intro]]

 === Chapter 2.A

 [[ch2-a]]

 === Chapter 2.B

 [[ch2-b]]

----

In addition to making the document more manageable, this approach also has the benefit of helping you think through the outline and structure of the document.


== Editing locally (without the wiki)

One of the cool things about the Gollum wiki is that it's basically just a plain interface on top of a git repository.  This allows a lot of flexibility in using the tool.  For example, suppose you have a long flight and want to edit on the plane.  No problem -- just pull down your changes, do your edits, and then push them back up when you land.  Or, suppose you'd rather just skip the wiki interface entirely and just do everything locally.  That's fine to -- you can just do your edits, but you can push your project to the editing environment to share it with tech reviewers or access O'Reilly's build systems (more on that in a bit).   

There are a couple of things you'll need to be able to edit locally:

* A copy of git installed on your local machine.  You can get git at [link to git]
* Your public key.  This should have been installed when the repo was set up, but if not, contact [???].  (Someday we hope to have a UI where you can do this yourself, but that's for the future.)

Once you've git this set up, you're ready to use git. There are a few caveats.  The first is that Gollum can only work on the master branch, so any changes you want to share will need to be committed to the master and pushed up.  The second is that is anyone else makes changes on the repo in the interim, you'll need to resolve any conflicts to merge their changes; git will warn you about this when you try to push up the new repo.  Describing conflict resolution is beyond the scope of this document, but Scontt Chacon's http://progit.org/book/[Pro git] book is an outstanding resource.

[NOTE]
====
* sudo -Hu root ssh-keygen -t rsa
* ssh-keygen -t rsa
* sudo cat /root/.ssh/id_rsa.pub

This will look something like this:

----
$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/odewahn/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/odewahn/.ssh/id_rsa.
Your public key has been saved in /home/odewahn/.ssh/id_rsa.pub.
The key fingerprint is:
0b:d0:05:60:0a:5a:ed:95:92:07:b1:87:03:e5:2c:75 odewahn@oreilly.com
The key's randomart image is:
+--[ RSA 2048]----+
|. ooB=Eo.        |
|.o B+=+.         |
|. o.B+o          |
|   ..+           |
|      . S        |
|       . .       |
|        .        |
|                 |
|                 |
+-----------------+

$ cat ~/.ssh/id_rsa.pub 
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6HuZxHII1OFWDY5TIdGlNg0HHfaWwC/ClgHe2WgPezBF3UZPnXnJCUH/ecA3JRnvrcnFlJqKYlNcS/OZz8IguHh3AsNuwbBmDNXS/VB31LcV0gy8TovmEef20n+FO4xF6S4Zsm5Dbz8S/bOtrRxP+X0ujeYr3KOvs7qSq8g4ciVoXf20XJyicnJU2bFJqS5ngVecZd2h1TAvE6SgAEI2+00Bg1r/pbAaV/HNgszlvo++oaiGi88d1kfpdnCmemGYNLccprBgsE9etVYArOI6HiwyswbeRz/b5bgJR1gMwZq8hLMX1IQcMCaFfveG5EL1fYS2nmUl6/GXYTs0dkCeNw== odewahn@oreilly.com
----
====

=== Common use cases when working with git locally

The URI to access the repo on your remote editing environment is very close to the wiki URL, except that you don't include the "HTTP://".  The user name is "git" and the repo name is "git_repo.git."  So, if the URL for your editing environment is "http://test.makerpress.com," the URI for your repo will be "git@example.makerpress.com:git_repo.git".  The remainder of this sections describes some of the common use cases for using git locally:

* If you're starting  push a repo from your local machine to the remote editing environment, do this:

----
$ cd /the/local/directory
$ git add remote gollum git@example.makerpress.com
$ git push gollum master
----

This will push the repo up to your editing environment.  This is the way a lot of people start the projects.


* To clone the repo from the editing environment, you can do this:

----
$ git clone git@example.makerpress.com:git_repo.git <local directory name>
----

This command will pull down the repo into a local folder.


* Add lots of images or code examples

The "Upload Attachment" feature is nice, but it can be a real drag if you want to add a bunch of images or code examples.  Using git locally is one of the best ways to get a bunch of files added quickly.  Al you have to do is bring down the repo and put the files into the "attachments" directory.  For example:

----
$ git clone git@example.makerpress.com:git_repo.git add_images_and_code
$ cd add_images_and_code
$ cd attachments
$ cp /some/image/dir/*.jpg .
$ cp /some/code/dir/*.c .
$ cd ..
$ git add attachments/*.*
$ git commit -a -m"Added a bunch of images and code"
$ git push origin master
$ cd ..
$ rm -rf add_images_and_code
----

You can not reference all these files in your document, like this:

----
  image::attachments/new_img.jpg[]
  ...
  include::attachments/new_code.c[]
----


* Clean up file names

The native Gollum interface doesn't allow you to change file names or manipulate the directory structure for your repo.  If you want to do this, you can just pull the repo down, make your changes in git, do your commit, and then push some files up.  For example:

----
$ git clone git@example.makerpress.com:git_repo.git move_files
$ cd move_files
$ git mv crappy_name.asciidoc nice_name.asciidoc
$ git rm unused_file.asciidoc
$ git commit -a -m"Changed some file names"
$ git push origin master
$ cd ..
$ rm -rf move_files
----


* Manipulate your repo with scripts

Suppose you want to do something sort of complex, like performing a global search and replace or converting all the URLs in your document into bit.ly links.  (Or whatever).  To do this, you can simple clone the repo, execute your script (or whatever), commit your changes, and then push the repo back up.  For example:

----
$ git clone git@example.makerpress.com:git_repo.git manipulate
$ cd manipulate
...
Run script to replace all URLs with equivalent bit.ly links
...
$ git commit -a -m"Changed all links to bit.ly links"
$ git push origin master
----



== Tips and Tricks

* Write in a text editor and paste the content into the Gollum wiki
* Don't put section headers inside your content sections -- put them in the "Home" file
* Don't use footnotes
* Don't have an empty section
* Don't start an xref with a number or character
* Don't duplicate an xref name
* To generate a PDF from this repo, use this command: "a2x -fpdf --fop  --no-xmllint README.asciidoc"